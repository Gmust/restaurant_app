@page "/dishes/{DishId:int}"
@inject DishService DishService
@inject UserService UserService

<h2>@dish?.Name</h2>

@if (dish != null)
{
    <div class="row">
        <div class="col-4">
            @if (!string.IsNullOrEmpty(dish.ImagePath))
            {
                <img src="@dish.ImagePath" alt="@dish.Name" class="img-fluid"/>
            }
        </div>
        <div class="col-8">
            <p>@dish.Description</p>
            <p><strong>Price:</strong> @dish.Price.ToString("C")</p>
            <p><strong>Average Rating:</strong> @averageRating stars</p>
        </div>
    </div>
    <hr/>
    <h4>Reviews</h4>
    @foreach (var rev in dish.Reviews.OrderByDescending(r => r.ReviewDate))
    {
        <div class="border p-2 mb-2">
            <p>@rev.User?.Name - @rev.Rating stars</p>
            <p>@rev.Comment</p>
            <small>@rev.ReviewDate.ToShortDateString()</small>
        </div>
    }

    <hr/>
    <h4>Add Review</h4>
    <EditForm Model="newReview" OnValidSubmit="SubmitReview">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label>User:</label>
            <InputSelect @bind-Value="newReview.UserId" class="form-control">
                <option value="0">Select User</option>
                @foreach (var u in users)
                {
                    <option value="@u.UserId">@u.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Rating:</label>
            <InputNumber class="form-control" @bind-Value="newReview.Rating"/>
        </div>
        <div class="form-group">
            <label>Comment:</label>
            <InputTextArea class="form-control" @bind-Value="newReview.Comment"/>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter] public int DishId { get; set; }
    private Dish? dish;
    private List<User> users = new();
    private Review newReview = new();

    private decimal averageRating => dish != null && dish.Reviews.Any() ? (decimal)dish.Reviews.Average(r => (double)r.Rating) : 0;

    protected override async Task OnInitializedAsync()
    {
        dish = await DishService.GetByIdAsync(DishId);
        users = await UserService.GetAllAsync();
        newReview.DishId = DishId;
        newReview.ReviewDate = DateTime.UtcNow;
    }

    private async Task SubmitReview()
    {
        if (newReview.UserId == 0) return;

        newReview.ReviewId = 0;

        await DishService.AddReviewAsync(newReview);

        dish = await DishService.GetByIdAsync(DishId);

        newReview = new Review
        {
            DishId = DishId,
            ReviewDate = DateTime.UtcNow
        };
    }

}
