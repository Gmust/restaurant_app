@page "/dishes"
@inject DishService DishService
@using Microsoft.JSInterop
@using RestaurantApp.DTOs
@using RestaurantApp.Models

<h2>Dishes</h2>

<div class="form-inline mb-3">
    <input @bind="searchText" class="form-control mr-2" placeholder="Search..."/>
    <label class="form-check-label ml-2">
        <input type="checkbox" @bind="useRegex"/> Use Regex
    </label>
    <div class="mt-3">
        <button class="btn btn-primary ml-2" @onclick="Search">Search</button>
        <button class="btn btn-success ml-2" @onclick="NewDish">Add Dish</button>
        <button class="btn btn-secondary ml-2" @onclick="ExportToJson">Export as JSON</button>
        <button class="btn btn-secondary ml-2" @onclick="TriggerFileInput">Import from JSON</button>
        <input type="file" @ref="importFileInput" accept="application/json" style="display:none"
               @onchange="ImportFromJson"/>

    </div>
</div>

<table class="table table-striped">
    <thead>
    <tr>
        <th>Image</th>
        <th>Name</th>
        <th>Price</th>
        <th>Description</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var dish in dishes)
    {
        <tr>
            <td>
                @if (!string.IsNullOrEmpty(dish.ImagePath))
                {
                    <img src="@dish.ImagePath" alt="@dish.Name" width="50" height="50"/>
                }
            </td>
            <td>@dish.Name</td>
            <td>@dish.Price.ToString("C")</td>
            <td>@dish.Description</td>
            <td>
                <button class="btn btn-link" @onclick="() => EditDish(dish.DishId)">Edit</button>
                <button class="btn btn-link text-danger" @onclick="() => DeleteDish(dish.DishId)">Delete</button>
                <button class="btn btn-link" @onclick="() => ViewDetails(dish.DishId)">View</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@inject IJSRuntime JS

@code {
    private List<Dish> dishes = new();
    private string? searchText;
    private bool useRegex;

    private ElementReference importFileInput;

    private async Task TriggerFileInput()
    {
        await JS.InvokeVoidAsync("triggerFileInput", importFileInput);
    }

    private async Task ImportFromJson(ChangeEventArgs e)
    {
        var json = await JS.InvokeAsync<string>("readUploadedFileAsText", importFileInput);

        if (!string.IsNullOrWhiteSpace(json))
        {
            var imported = System.Text.Json.JsonSerializer.Deserialize<List<DishExportDto>>(json);

            if (imported != null)
            {
                dishes = imported.Select(d => new Dish
                {
                    DishId = d.DishId,
                    Name = d.Name,
                    Price = d.Price,
                    Description = d.Description,
                    ImagePath = d.ImagePath
                }).ToList();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        dishes = await DishService.GetAllAsync();
    }

    private async Task ExportToJson()
    {
        var exportList = dishes.Select(d => new DishExportDto
        {
            DishId = d.DishId,
            Name = d.Name,
            Price = d.Price,
            Description = d.Description,
            ImagePath = d.ImagePath
        }).ToList();

        var json = System.Text.Json.JsonSerializer.Serialize(exportList);
        await JS.InvokeVoidAsync("saveFile", "dishes.json", json);
    }

    private async Task Search()
    {
        dishes = await DishService.SearchAsync(searchText, useRegex);
    }

    private void NewDish()
    {
        NavManager.NavigateTo("/dishes/edit/0");
    }

    private void EditDish(int id)
    {
        NavManager.NavigateTo($"/dishes/edit/{id}");
    }

    private async Task DeleteDish(int id)
    {
        await DishService.DeleteAsync(id);
        dishes = await DishService.GetAllAsync();
    }

    private void ViewDetails(int id)
    {
        NavManager.NavigateTo($"/dishes/{id}");
    }

    [Inject] private NavigationManager NavManager { get; set; } = null!;
}
